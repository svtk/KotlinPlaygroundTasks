{
  "head" : "Interchangeable predicates",
  "code" : "//sampleStart\nfun List<Int>.allNonZero() = all { [mark]TODO()[/mark] }\nfun List<Int>.allNonZero1() = none { [mark]TODO()[/mark] }\nfun List<Int>.allNonZero2() = any { [mark]TODO()[/mark] }\n\nfun List<Int>.containsZero() = any { [mark]TODO()[/mark] }\nfun List<Int>.containsZero1() = all { [mark]TODO()[/mark] }\nfun List<Int>.containsZero2() = none { [mark]TODO()[/mark] }\n\nfun main(args: Array<String>) {\n    val list1 = listOf(1, 2, 3)\n    list1.allNonZero() eq true\n    list1.allNonZero1() eq true\n    list1.allNonZero2() eq true\n\n    list1.containsZero() eq false\n    list1.containsZero1() eq false\n    list1.containsZero2() eq false\n\n    val list2 = listOf(0, 1, 2)\n    list2.allNonZero() eq false\n    list2.allNonZero1() eq false\n    list2.allNonZero2() eq false\n\n    list2.containsZero() eq true\n    list2.containsZero1() eq true\n    list2.containsZero2() eq true\n}\n\n//sampleEnd\ninfix fun <T> T.eq(other: T) {\n    if (this == other) println(\"OK\")\n    else println(\"Error: $this != $other\")\n}",
  "task" : "Functions 'all', 'none' and 'any' are interchangeable, you can use one or the other to implement the same functionality.\nImplement the functions 'allNonZero' and 'containsZero' using all three predicates in turn. 'allNonZero' checks that all the elements in the list are non-zero; 'containsZero' checks that the list contains zero element.\nAdd the negation before the whole call (right before 'any', 'all' or 'none') where necessary, not only inside the predicate itself.",
  "link" : "https://www.coursera.org/learn/kotlin-for-java-developers/lecture/2m1gu/solution-interchangeable-predicates",
  "platform" : "java"
}